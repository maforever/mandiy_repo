package com.lanrui.andiy.ui;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.ArrayList;

import com.lanrui.andiy.R;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.ColorMatrix;
import android.graphics.ColorMatrixColorFilter;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Bitmap.Config;
import android.graphics.drawable.BitmapDrawable;
import android.os.Bundle;
import android.os.Environment;
import android.os.SystemClock;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.PopupWindow;
import android.widget.SeekBar;
import android.widget.TextView;
import android.widget.SeekBar.OnSeekBarChangeListener;

public class EditePhotoActivity extends Activity {
	private PopupWindow popupWindow = null;
	private TextView tipsTextView = null;
	private String selectedPath;
	private ArrayList<String> paths;
	private ArrayList<String> selectedPaths;
	private ImageView pic_before_edit = null;
	private Bitmap bitmap, newmap, desbitmap= null;
	private ImageView close_adjust = null;
	private SeekBar seekBar = null;
	private int imgHeight, imgWidth;
	private float degrees = 0f;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.build_edit_image);

		selectedPath = getIntent().getStringExtra("selectedPath");
		selectedPaths = getIntent().getStringArrayListExtra("selectedPaths");
		paths = getIntent().getStringArrayListExtra("paths");
		tipsTextView = (TextView) findViewById(R.id.tips);
		pic_before_edit = (ImageView) findViewById(R.id.pic_befor_edit);
		bitmap = decodeFile(new File(selectedPath));
		newmap = Bitmap.createScaledBitmap(bitmap, 200, 300, false);
        imgHeight = newmap.getHeight();
        imgWidth = newmap.getWidth();
		pic_before_edit.setImageBitmap(newmap);
		
		View contentView = this.getLayoutInflater().inflate(R.layout.picadjust_popwindow, null);
		seekBar = (SeekBar) contentView.findViewById(R.id.adjust_seekbar);
		seekBar.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {
			public void onStopTrackingTouch(SeekBar seekBar) {
			}
			public void onStartTrackingTouch(SeekBar seekBar) {
			}
			public void onProgressChanged(SeekBar seekBar, int progress,
					boolean fromUser) {
				if(desbitmap == null) {
					Log.i("a", desbitmap == null ? "true" : "false");
					desbitmap = Bitmap.createBitmap(imgWidth, imgHeight, Config.ARGB_8888);
				}else {
					Log.i("a", desbitmap == null ? "true" : "false");
				}
				//int brightness = progress - 127;
				int brightness = progress;
				ColorMatrix colorMatrix = new ColorMatrix();
				colorMatrix.set(new float[]{1,0,0,0, brightness,0, 1, 0, 0, brightness, 0, 0, 1, 0, brightness,0,0,0,1,0});
				Paint paint = new Paint();
				paint.setColorFilter(new ColorMatrixColorFilter(colorMatrix));
				Canvas canvas = new Canvas(desbitmap);
				canvas.drawBitmap(newmap, 0, 0, paint);
				pic_before_edit.setImageBitmap(desbitmap);

			}

		});
		
		
		close_adjust = (ImageView) contentView.findViewById(R.id.close_adjust);
		close_adjust.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				if(popupWindow!= null && popupWindow.isShowing()) {
					popupWindow.dismiss();
				}
			}
		});
		
		popupWindow = new PopupWindow(contentView,
				ViewGroup.LayoutParams.MATCH_PARENT,
				150);
		popupWindow.setFocusable(true);
		popupWindow.setBackgroundDrawable(new BitmapDrawable());
		
	}
	
	private byte[] bitmap2Bytes(Bitmap bitmap) {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		bitmap.compress(Bitmap.CompressFormat.PNG, 100, baos);
		return baos.toByteArray();
	}
	
	public void saveAdjustedPic() {
		File file = new File(Environment.getExternalStorageDirectory() + File.separator + "myyin8/my_pic");
		if(!file.exists()) file.mkdirs();
		File imgFile = new File(file, "image_" + SystemClock.currentThreadTimeMillis() + ".png");
		if(desbitmap != null) {
			byte[] datas = bitmap2Bytes(desbitmap);
			try {
				FileOutputStream fos = new FileOutputStream(imgFile);
				fos.write(datas);
				fos.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}else {
			byte[] datas = bitmap2Bytes(newmap);
			try {
				FileOutputStream fos = new FileOutputStream(imgFile);
				fos.write(datas);
				fos.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		selectedPaths.remove(selectedPath);
		selectedPaths.add(imgFile.getAbsolutePath());
	}
	
	private Bitmap decodeFile(File f){
	    try {
	        //Decode image size
	        BitmapFactory.Options o = new BitmapFactory.Options();
	        o.inJustDecodeBounds = true;
	        BitmapFactory.decodeStream(new FileInputStream(f),null,o);

	        //The new size we want to scale to
	        final int REQUIRED_SIZE=70;

	        //Find the correct scale value. It should be the power of 2.
	        int scale=1;
	        while(o.outWidth/scale/2>=REQUIRED_SIZE && o.outHeight/scale/2>=REQUIRED_SIZE)
	            scale*=2;

	        //Decode with inSampleSize
	        BitmapFactory.Options o2 = new BitmapFactory.Options();
	        o2.inSampleSize=scale;
	        return BitmapFactory.decodeStream(new FileInputStream(f), null, o2);
	    } catch (FileNotFoundException e) {}
	    return null;
	}

	public void btnClick(View view) {
		switch (view.getId()) {
		case R.id.close:
			EditePhotoActivity.this.finish();
			break;
		case R.id.ok:
			saveAdjustedPic();
			EditePhotoActivity.this.finish();
			Intent intent = new Intent(EditePhotoActivity.this, PicPreviewActivity.class);
			intent.putStringArrayListExtra("selectedPaths", selectedPaths);
			intent.putStringArrayListExtra("paths", paths);
			startActivity(intent);
			break;

		case R.id.adjust:
			View parent = findViewById(R.id.pop_parent);
			popupWindow.showAtLocation(parent, Gravity.BOTTOM, 0, 60);
			break;
		case R.id.rotate:
			if(popupWindow != null && popupWindow.isShowing()) {
				popupWindow.dismiss();
			}else {
				degrees += 90;
		    	Matrix matrix = new Matrix();
		    	matrix.postRotate(degrees);
		    	if(desbitmap != null) {
		    		desbitmap = Bitmap.createBitmap(desbitmap, 0, 0, imgWidth, imgHeight, matrix, true);
		    		desbitmap = Bitmap.createScaledBitmap(desbitmap, imgWidth, imgHeight, true);
		    	}else {
		    		desbitmap = Bitmap.createBitmap(newmap, 0, 0, imgWidth, imgHeight, matrix, true);
		    		desbitmap = Bitmap.createScaledBitmap(desbitmap, imgWidth, imgHeight, true);
		    	}
		    	pic_before_edit.setImageBitmap(desbitmap);
			}
			break;
		case R.id.change:
			break;
		}
	}
}

package com.lanrui.andiy.adapter;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.List;

import com.lanrui.andiy.R;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;

public class PhotoGridViewAdater extends BaseAdapter {
	private Context context = null;
	private List<String> paths = null;
	private LayoutInflater inflater = null;
	private List<String> selectedPaths = null;
	public PhotoGridViewAdater(Context context, List<String> paths, List<String> selectedPaths) {
		this.context = context;
		this.paths = paths;
		this.selectedPaths = selectedPaths;
		inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
	}
	public int getCount() {
		return paths.size();
	}

	public Object getItem(int position) {
		return paths.get(position);
	}

	public long getItemId(int position) {
		return position;
	}

	public View getView(int position, View convertView, ViewGroup parent) {
		convertView = inflater.inflate(R.layout.build_select_item_media, null);
		ImageView image = (ImageView) convertView.findViewById(R.id.media);
		Bitmap bitmap = decodeFile(new File(paths.get(position)));
		image.setImageBitmap(bitmap);
		ImageView selectedImage = (ImageView) convertView.findViewById(R.id.selected);
		if(selectedPaths.contains(paths.get(position))) {
			selectedImage.setVisibility(ViewGroup.VISIBLE);
		}else {
			selectedImage.setVisibility(ViewGroup.GONE);
		}
		

		
		return convertView;
	}
	

	private Bitmap decodeFile(File f){
	    try {
	        //Decode image size
	        BitmapFactory.Options o = new BitmapFactory.Options();
	        o.inJustDecodeBounds = true;
	        BitmapFactory.decodeStream(new FileInputStream(f),null,o);

	        //The new size we want to scale to
	        final int REQUIRED_SIZE=70;

	        //Find the correct scale value. It should be the power of 2.
	        int scale=1;
	        while(o.outWidth/scale/2>=REQUIRED_SIZE && o.outHeight/scale/2>=REQUIRED_SIZE)
	            scale*=2;

	        //Decode with inSampleSize
	        BitmapFactory.Options o2 = new BitmapFactory.Options();
	        o2.inSampleSize=scale;
	        return BitmapFactory.decodeStream(new FileInputStream(f), null, o2);
	    } catch (FileNotFoundException e) {}
	    return null;
	}
	

}


























